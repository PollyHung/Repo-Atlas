View(TMEM173)
## examples
TMEM173 <- read.delim("~/Desktop/CRISPR_screening/data/BIOGRID/BIOGRID-GENE-130988-4.4.240.tab3.txt")
TMEM173 %>% dplyr::filter(TMEM173$Official.Symbol.Interactor.B %in% chr2_genes)
## achilles
accilles_gene_dependency <- read.csv("~/Desktop/CRISPR_screening/data/Achillies/Achilles_gene_dependency.csv")
View(accilles_gene_dependency)
## achilles
accilles_gene_dependency <- read.csv("~/Desktop/CRISPR_screening/data/Achillies/Achilles_gene_dependency.csv",
check.names = FALSE)
achilles_gene_dependency <- read.csv("~/Desktop/CRISPR_screening/data/Achillies/Achilles_gene_dependency.csv",
check.names = FALSE)
achilles_gene_effect <- read.csv("~/Desktop/CRISPR_screening/data/Achillies/Achilles_gene_effect.csv", check.names = F)
achilles_sample_info <- read.csv("~/Desktop/CRISPR_screening/data/Achillies/sample_info.csv", check.names = F)
View(achilles_sample_info)
rm(accilles_gene_dependency)
View(achilles_gene_dependency)
View(achilles_gene_effect)
View(achilles_gene_dependency)
View(achilles_gene_effect)
View(achilles_sample_info)
achilles_gene_dependency$`TMEM173 (340061)`
achilles_gene_dependency$`TMEM173 (340061)` %>% hist()
View(achilles_sample_info)
achilles_common_essentials <- read.csv("~/Desktop/CRISPR_screening/data/Achillies/Achilles_common_essentials.csv", check.names = F)
View(achilles_common_essentials)
rm(achilles_common_essentials)
chr2_genes
View(achilles_sample_info)
View(TMEM173)
SH3BP4 <- read.delim("~/Desktop/CRISPR_screening/data/BIOGRID/SH3BP4/BIOGRID-ORCS-GENES-1.1.16.screen.tab.txt")
View(SH3BP4)
SH3BP4 <- read.delim("~/Desktop/CRISPR_screening/data/BIOGRID/SH3BP4/BIOGRID-ORCS-SCREEN_INDEX-1.1.16.index.tab.txt")
View(SH3BP4)
SH3BP4 <- read.delim("~/Desktop/CRISPR_screening/data/BIOGRID/SH3BP4/BIOGRID-ORCS-GENES-1.1.16.screen.tab.txt")
View(SH3BP4)
SH3BP4 <- read.delim("~/Desktop/CRISPR_screening/data/BIOGRID/BIOGRID-GENE-117194-4.4.240.tab3.txt")
View(SH3BP4)
SH3BP4 %>% head
?filter
read.delim("~/Desktop/CRISPR_screening/data/BIOGRID/BIOGRID-GENE-117194-4.4.240.tab3.txt") %>%
dplyr::filter(Official.Symbol.Interactor.A %in% c("SH3BP4", chr2_genes) |
Official.Symbol.Interactor.B %in% c("SH3BP4", chr2_genes))
SH3BP4_A <- read.delim("~/Desktop/CRISPR_screening/data/BIOGRID/BIOGRID-GENE-117194-4.4.240.tab3.txt") %>%
dplyr::filter(Official.Symbol.Interactor.A == "SH3BP4" & Official.Symbol.Interactor.B %in% chr2_genes)
View(SH3BP4_A)
SH3BP4_A <- read.delim("~/Desktop/CRISPR_screening/data/BIOGRID/BIOGRID-GENE-117194-4.4.240.tab3.txt") %>%
dplyr::filter(Official.Symbol.Interactor.A == "SH3BP4" & Official.Symbol.Interactor.B %in% cGAS_STING_genes)
SH3BP4_A <- read.delim("~/Desktop/CRISPR_screening/data/BIOGRID/BIOGRID-GENE-117194-4.4.240.tab3.txt") %>%
dplyr::filter(Official.Symbol.Interactor.B == "SH3BP4" & Official.Symbol.Interactor.A %in% cGAS_STING_genes)
cGAS_STING_genes
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("QDNAseq")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("QDNAseq")
library(QDNAseq)
library(QDNAseq)
library(dplyr)
library(tidyr)
library(magrittr)
remotes::install_github("asntech/QDNAseq.hg38@main")
## This is for pre-built hg38 bins
bins <- getBinAnnotations(binSize=15, genome="hg38")
bins
folder_path <- "~/Desktop/QDNAseq/data/FT190_sWGS/"
list.files(folder_path)
folder_path <- "~/Desktop/QDNAseq/data/FT190_sWGS/"
list.files(folder_path)
data_list <- list.files(folder_path)
folder_path <- "~/Desktop/QDNAseq/data/FT190_sWGS"
data_list <- list.files(folder_path)
for(i in data_list){
temp <- file.path(folder_path, i)
list.files(temp)
}
folder_path <- "~/Desktop/QDNAseq/data/FT190_sWGS"
data_list <- list.files(folder_path)
for(i in data_list){
temp <- file.path(folder_path, i)
list.files(temp)
}
for(i in data_list){
temp <- file.path(folder_path, i)
list.files(temp)
}
folder_path <- "~/Desktop/QDNAseq/data/FT190_sWGS"
data_list <- list.files(folder_path)
for(i in data_list){
temp <- file.path(folder_path, i)
list.files(temp) %>% print()
}
folder_path <- "~/Desktop/QDNAseq/data/FT190_sWGS"
data_list <- list.files(folder_path)
for(i in data_list){
temp <- file.path(folder_path, i)
list.files(temp, pattern = ".fq.gz") %>% print()
}
data_list <- list.files(folder_path, pattern = ".fq.gz", recursive = TRUE)
data_list
folder_path <- "~/Desktop/QDNAseq/data/FT190_sWGS"
data_list <- list.files(folder_path, pattern = ".fq.gz", recursive = TRUE)
data_list
file <- data_list[[1]]
i <- data_list[[1]]
sub(".*_([0-9]+_.*)", paste0("FT190_NT_\\1"), i)
strsplit(i, split = "/")
sample <- strsplit(i, split = "/")[[1]]
sample
sample <- strsplit(i, split = "/")[[1]][1]
sample
strsplit(i, split = "_")
strsplit(i, split = "_")[[1]][-1]
strsplit(i, split = "_")[[1]][[-1]]
strsplit(i, split = "_")[-1]
strsplit(i, split = "_")[[1]][-1]
list(strsplit(i, split = "_")[[1]])[-1]
list(strsplit(i, split = "_")[[1]])
strsplit(i, split = "_")[[1]]
split_list <- strsplit(i, split = "_")[[1]]
fastq_seq <- split_list[length(split_list)]
fastq_seq
file.path(sample, fastq_seq)
fastq_seq
fastq_seq
paste0("S", fastq_seq)
fastq_seq <- paste0("S", split_list[length(split_list)])
fastq_seq
paste0("S0", split_list[length(split_list)])
sample <- strsplit(i, split = "/")[[1]][1]
split_list <- strsplit(i, split = "_")[[1]]
fastq_seq <- paste0("S", split_list[length(split_list)])
new_name <- file.path(sample, fastq_seq)
new_name
file.rename(i, new_name)
getwd()
setwd(folder_path)
file.rename(i, new_name)
# list files
folder_path <- "~/Desktop/QDNAseq/data/FT190_sWGS"
data_list <- list.files(folder_path, pattern = ".fq.gz", recursive = TRUE)
# rename files
for (i in data_list) {
sample <- strsplit(i, split = "/")[[1]][1]
split_list <- strsplit(i, split = "_")[[1]]
fastq_seq <- paste0("S", split_list[length(split_list)])
new_name <- file.path(sample, fastq_seq)
setwd(folder_path)
file.rename(i, new_name)
}
list.files(folder_path, pattern = ".fq.gz", recursive = TRUE)
grepl("S1.fq.gz|S2.fq.gz", data_list)
grepl("S1.fq.gz|S2.fq.gz", list.files(folder_path, pattern = ".fq.gz", recursive = TRUE))
# rename files
# for (i in data_list) {
#   sample <- strsplit(i, split = "/")[[1]][1]
#   split_list <- strsplit(i, split = "_")[[1]]
#   fastq_seq <- paste0("S", split_list[length(split_list)])
#   new_name <- file.path(sample, fastq_seq)
#
#   setwd(folder_path)
#   file.rename(i, new_name)
# }
list.files(folder_path, pattern = ".fq.gz", recursive = TRUE)
sum(grepl("S1.fq.gz|S2.fq.gz", data_list))
grepl("S1.fq.gz|S2.fq.gz", data_list)
# list files
folder_path <- "~/Desktop/QDNAseq/data/FT190_sWGS"
data_list <- list.files(folder_path, pattern = ".fq.gz", recursive = TRUE)
data_list
## rename files (only have to be run once)
# for (i in data_list) {
#   sample <- strsplit(i, split = "/")[[1]][1]
#   split_list <- strsplit(i, split = "_")[[1]]
#   fastq_seq <- paste0("S", split_list[length(split_list)])
#   new_name <- file.path(sample, fastq_seq)
#
#   setwd(folder_path)
#   file.rename(i, new_name)
# }
data_list <- list.files(folder_path, recursive = TRUE)
data_list
data_list <- list.files(folder_path)
data_list
## rename files (only have to be run once)
# for (i in data_list) {
#   sample <- strsplit(i, split = "/")[[1]][1]
#   split_list <- strsplit(i, split = "_")[[1]]
#   fastq_seq <- paste0("S", split_list[length(split_list)])
#   new_name <- file.path(sample, fastq_seq)
#
#   setwd(folder_path)
#   file.rename(i, new_name)
# }
write.table(data_list, "~/Desktop/QDNAseq/data/metadata/sample.txt", sep = "\t",
quote = F, row.names = F, col.names = F)
TCR <- readxl::read_xls("~/Desktop/TLS_spatial_transcriptomics/metadata/RCC.xlsx", sheet = 1)
TCR <- readxl::read_xlsx("~/Desktop/TLS_spatial_transcriptomics/metadata/RCC.xlsx", sheet = 1)
SPATIAL <- readxl::read_xlsx("~/Desktop/TLS_spatial_transcriptomics/metadata/RCC.xlsx", sheet = 2)
View(TCR)
TCR <- readxl::read_xls("~/Desktop/TLS_spatial_transcriptomics/metadata/RCC.xlsx", sheet = 1, skip = 1)
TCR <- readxl::read_xlsx("~/Desktop/TLS_spatial_transcriptomics/metadata/RCC.xlsx", sheet = 1, skip = 1)
spatial <- readxl::read_xlsx("~/Desktop/TLS_spatial_transcriptomics/metadata/RCC.xlsx", sheet = 2, skip = 1)
spatial <- readxl::read_xlsx("~/Desktop/TLS_spatial_transcriptomics/metadata/RCC.xlsx", sheet = 2)
View(spatial)
TCR <- TCR %>% dplyr::filter(Patient_ID %in% spatial$Patient_ID)
library(magrittr)
TCR <- TCR %>% dplyr::filter(Patient_ID %in% spatial$Patient_ID)
View(TCR)
TCR <- TCR %>% dplyr::filter(Patient_ID %in% spatial$Patient_ID) %>% dplyr::filter(Library_Type == "TCR")
unique(TCR$Patient_ID)
View(spatial)
spatial$id <- paste0(spatial$Patient_ID, "_", spatial$Region)
TCR$id <- paste0(TCR$Patient_ID, "_", TCR$Region)
TCR <- TCR %>% dplyr::filter(ud %in% spatial$id)
TCR <- TCR %>% dplyr::filter(id %in% spatial$id)
View(TCR)
View(spatial)
spatial <- spatial %>% dplyr::filter(Pass == "Yes")
spatial <- readxl::read_xlsx("~/Desktop/TLS_spatial_transcriptomics/metadata/RCC.xlsx", sheet = 2)
spatial <- spatial %>% dplyr::filter(Pass == "yes")
cspatial <- readxl::read_xlsx("~/Desktop/TLS_spatial_transcriptomics/metadata/RCC.xlsx", sheet = 2)
spatial$id <- paste0(spatial$Patient_ID, "_", spatial$Region)
rm(cspatial)
rm(SPATIAL)
TCR <- TCR %>% dplyr::filter(id %in% spatial$id)
View(TCR)
spatial$whyFail <- NULL
spatial <- spatial %>% dplyr::rename(spatial_sequenceing_lane = Sequencing_Lane)
TCR <- TCR %>% dplyr::select(id, Sequencing_Lane)
spatial <- merge(spatial, TCR, by = "id")
spatial <- spatial %>% dplyr::rename(TCR_sequenceing_lane = Sequencing_Lane)
write.csv(spatial, "~/Desktop/TLS_spatial_transcriptomics/metadata/RCC.csv")
# library packages
library(dplyr)
library(tidyr)
library(magrittr)
library(ggplot2)
library(MetaboAnalystR)
library(reshape2)
library(tidyverse)
library(FSA)
# set working directory
setwd("/Users/pollyhung/Desktop/metabolomics/")
HOME = "results/SD versus PD/"
# create directories
if(!dir.exists(HOME)){
dir.create(HOME)
dir.create(file.path(HOME, "1_normalisation"))
dir.create(file.path(HOME, "2_univariate"))
dir.create(file.path(HOME, "3_PCA"))
dir.create(file.path(HOME, "4_PLS"))
dir.create(file.path(HOME, "5_ROC"))
setwd(HOME)
print(paste0("directory created! We are now at: ", getwd()))
} else {
setwd(HOME)
print(paste0("directory exists! We are now at: ", getwd()))
}
load("image.RData")
t_test
imp_var
## Perform PLS analysis --------------------------------------------------------
# Perform PLS analysis
set.seed(223)
mSet<-PLSR.Anal(mSet, reg=FALSE)
mSet$analSet$plsda$fit.info
# Fold Change Analysis
pre_mSet <- FC.Anal(pre_mSet, 1.0, 0, FALSE)
pre_mSet <- PlotFC(pre_mSet, "2_univariate/fold_change", "png", 300, width=6)
fold_change <- pre_mSet$analSet$fc
# Perform T-test (parametric) and fold change test when comparing two groups
pre_mSet <- Ttests.Anal(pre_mSet, nonpar=F, threshp=0.10, paired=FALSE, equal.var=TRUE, "fdr", FALSE)
pre_mSet <- PlotTT(pre_mSet, imgName = "2_univariate/t_test", format = "png", dpi = 300, width=7)
t_test <- pre_mSet$analSet$tt
imp_var <- pre_mSet$analSet$tt$sig.mat %>% rownames()
data_filtered <- data %>% dplyr::select(sample_id, response, all_of(imp_var))
write.csv(data_filtered, "data_filtered.csv", row.names = F, col.names = T, quote = F)
## MetaboAnalystR Processing -------------
system("lsof -i -P -n | grep Rserve")
mSet <- InitDataObjects("conc", "stat", FALSE)
mSet <- Read.TextData(mSet, "data_filtered.csv", "rowu", "disc")
mSet <- SanityCheckData(mSet) ## do a basic check on dataframe
mSet <- ReplaceMin(mSet) ## replace missing or zero values
mSet <- PreparePrenormData(mSet) ## prepare data for normalization
mSet <- Normalization(mSet,
rowNorm = "MedianNorm",
transNorm = "LogNorm",
scaleNorm = "MeanCenter",
ratio = FALSE,
ratioNum = 20)
mSet<-PlotNormSummary(mSet, "1_normalisation/filtered_norm", format ="png", dpi=300, width=NA)
mSet<-PlotSampleNormSummary(mSet, "1_normalisation/filtered_sample", format = "png", dpi=300, width=NA)
## Perform PCA analysis --------------------------------------------------------
mSet <- PCA.Anal(mSet)
w = 5
if(length(mSet$analSet$pca$cum.var) < 5){
pc = length(mSet$analSet$pca$cum.var)
} else {
pc = 5
}
# plots
mSet<-PlotPCAPairSummary(mSet, "3_PCA/pair_", format = "png", dpi = 300, width=w, pc)
mSet<-PlotPCAScree(mSet, "3_PCA/scree_", "png", dpi = 300, width=w, pc)
mSet<-PlotPCA2DScore(mSet, "3_PCA/score_", format = "png", dpi=300, width=w, 1, 2, 0.95, 1, 0)
mSet<-PlotPCALoading(mSet, "3_PCA/loading_", "png", 300, width=w, 1,2)
mSet<-PlotPCABiplot(mSet, "3_PCA/biplot_", format = "png", dpi = 300, width=w, 1, 2)
# Perform PLS analysis
set.seed(222)
mSet<-PLSR.Anal(mSet, reg=FALSE)
mSet<-PlotPLSPairSummary(mSet, "4_PLS/pair2_", "png", 300, width=w, pc)
mSet<-PlotPLS2DScore(mSet, "4_PLS/score2d_", "png", 300, width=w, 1,2,0.95,1,0)
mSet<-PlotPLS3DScoreImg(mSet, "4_PLS/score3d_", "png", 300, width=w, 1,2,3, 40)
mSet<-PlotPLSLoading(mSet, "4_PLS/loading_", "png", 300, width=w, 1, 2)
mSet<-PLSDA.CV(mSet, choice = "Q2")
mSet$analSet$plsda$fit.info
# Permutation test
mSet<-PlotPLS.Classification(mSet, "4_PLS/cv_", "png", 300, width=w)
mSet<-PlotPLS.Imp(mSet, "4_PLS/imp_", "png", 300, width=w, "vip", "Comp. 1", FALSE)
mSet<-PLSDA.Permut(mSet, 1000, "accu")
mSet<-PlotPLS.Permutation(mSet, "4_PLS/perm_", "png", 300, width=w)
pls_vip <- mSet$analSet$plsr$vip.mat %>% as.data.frame()
# re-plot
performance_data <- mSet$analSet$plsda$fit.info %>% as.data.frame()
performance_data$Metrics <- rownames(performance_data)
performance_data <- performance_data %>%
pivot_longer(cols = c("1 comps", "2 comps", "3 comps", "4 comps", "5 comps"),
names_to = "Components", values_to = "Value")
performance_data$Components <- gsub(" comps", "", performance_data$Components)
p1 <- ggplot(performance_data, aes(x = factor(Components), y = Value, fill = Metrics)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = round(Value, 2)), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Number of Components",
y = "Performance Score") +
ylim(0, 1) +
scale_fill_manual(values = c("#66C2A5", "#FC8D62", "#8DA0CB")) +
theme_minimal(base_size = 15) +
theme(legend.position = "top",
axis.title = element_text(size = 13),
legend.title = element_text(size = 13))
ggsave("4_PLS/cv_new.png", p1, width = 4, height = 4, units = "in", dpi = 600)
# Perform T-test (parametric) and fold change test when comparing two groups
pre_mSet <- Ttests.Anal(pre_mSet, nonpar=F, threshp=0.15, paired=FALSE, equal.var=TRUE, "fdr", FALSE)
pre_mSet <- PlotTT(pre_mSet, imgName = "2_univariate/t_test", format = "png", dpi = 300, width=7)
t_test <- pre_mSet$analSet$tt
imp_var <- pre_mSet$analSet$tt$sig.mat %>% rownames()
imp_var
data_filtered <- data %>% dplyr::select(sample_id, response, all_of(imp_var))
write.csv(data_filtered, "data_filtered.csv", row.names = F, col.names = T, quote = F)
## MetaboAnalystR Processing -------------
system("lsof -i -P -n | grep Rserve")
system("kill -9 12553")
mSet <- InitDataObjects("conc", "stat", FALSE)
mSet <- Read.TextData(mSet, "data_filtered.csv", "rowu", "disc")
mSet <- SanityCheckData(mSet) ## do a basic check on dataframe
mSet <- ReplaceMin(mSet) ## replace missing or zero values
mSet <- PreparePrenormData(mSet) ## prepare data for normalization
mSet <- Normalization(mSet,
rowNorm = "MedianNorm",
transNorm = "LogNorm",
scaleNorm = "MeanCenter",
ratio = FALSE,
ratioNum = 20)
mSet<-PlotNormSummary(mSet, "1_normalisation/filtered_norm", format ="png", dpi=300, width=NA)
mSet<-PlotSampleNormSummary(mSet, "1_normalisation/filtered_sample", format = "png", dpi=300, width=NA)
## Perform PCA analysis --------------------------------------------------------
mSet <- PCA.Anal(mSet)
w = 5
if(length(mSet$analSet$pca$cum.var) < 5){
pc = length(mSet$analSet$pca$cum.var)
} else {
pc = 5
}
# plots
mSet<-PlotPCAPairSummary(mSet, "3_PCA/pair_", format = "png", dpi = 300, width=w, pc)
mSet<-PlotPCAScree(mSet, "3_PCA/scree_", "png", dpi = 300, width=w, pc)
mSet<-PlotPCA2DScore(mSet, "3_PCA/score_", format = "png", dpi=300, width=w, 1, 2, 0.95, 1, 0)
mSet<-PlotPCALoading(mSet, "3_PCA/loading_", "png", 300, width=w, 1,2)
mSet<-PlotPCABiplot(mSet, "3_PCA/biplot_", format = "png", dpi = 300, width=w, 1, 2)
## Perform PLS analysis --------------------------------------------------------
# Perform PLS analysis
set.seed(222)
mSet<-PLSR.Anal(mSet, reg=FALSE)
mSet<-PlotPLSPairSummary(mSet, "4_PLS/pair2_", "png", 300, width=w, pc)
mSet<-PlotPLS2DScore(mSet, "4_PLS/score2d_", "png", 300, width=w, 1,2,0.95,1,0)
mSet<-PlotPLS3DScoreImg(mSet, "4_PLS/score3d_", "png", 300, width=w, 1,2,3, 40)
mSet<-PlotPLSLoading(mSet, "4_PLS/loading_", "png", 300, width=w, 1, 2)
mSet<-PLSDA.CV(mSet, choice = "Q2")
mSet$analSet$plsda$fit.info
# Perform T-test (parametric) and fold change test when comparing two groups
pre_mSet <- Ttests.Anal(pre_mSet, nonpar=F, threshp=0.10, paired=FALSE, equal.var=TRUE, "fdr", FALSE)
pre_mSet <- PlotTT(pre_mSet, imgName = "2_univariate/t_test", format = "png", dpi = 300, width=7)
t_test <- pre_mSet$analSet$tt
imp_var <- pre_mSet$analSet$tt$sig.mat %>% rownames()
data_filtered <- data %>% dplyr::select(sample_id, response, all_of(imp_var))
write.csv(data_filtered, "data_filtered.csv", row.names = F, col.names = T, quote = F)
## MetaboAnalystR Processing -------------
system("lsof -i -P -n | grep Rserve")
mSet <- InitDataObjects("conc", "stat", FALSE)
mSet <- Read.TextData(mSet, "data_filtered.csv", "rowu", "disc")
mSet <- SanityCheckData(mSet) ## do a basic check on dataframe
mSet <- ReplaceMin(mSet) ## replace missing or zero values
mSet <- PreparePrenormData(mSet) ## prepare data for normalization
mSet <- Normalization(mSet,
rowNorm = "MedianNorm",
transNorm = "LogNorm",
scaleNorm = "MeanCenter",
ratio = FALSE,
ratioNum = 20)
mSet<-PlotNormSummary(mSet, "1_normalisation/filtered_norm", format ="png", dpi=300, width=NA)
mSet<-PlotSampleNormSummary(mSet, "1_normalisation/filtered_sample", format = "png", dpi=300, width=NA)
## Perform PCA analysis --------------------------------------------------------
mSet <- PCA.Anal(mSet)
w = 5
if(length(mSet$analSet$pca$cum.var) < 5){
pc = length(mSet$analSet$pca$cum.var)
} else {
pc = 5
}
# plots
mSet<-PlotPCAPairSummary(mSet, "3_PCA/pair_", format = "png", dpi = 300, width=w, pc)
mSet<-PlotPCAScree(mSet, "3_PCA/scree_", "png", dpi = 300, width=w, pc)
mSet<-PlotPCA2DScore(mSet, "3_PCA/score_", format = "png", dpi=300, width=w, 1, 2, 0.95, 1, 0)
mSet<-PlotPCALoading(mSet, "3_PCA/loading_", "png", 300, width=w, 1,2)
mSet<-PlotPCABiplot(mSet, "3_PCA/biplot_", format = "png", dpi = 300, width=w, 1, 2)
## Perform PLS analysis --------------------------------------------------------
# Perform PLS analysis
set.seed(222)
mSet<-PLSR.Anal(mSet, reg=FALSE)
mSet<-PlotPLSPairSummary(mSet, "4_PLS/pair2_", "png", 300, width=w, pc)
mSet<-PlotPLS2DScore(mSet, "4_PLS/score2d_", "png", 300, width=w, 1,2,0.95,1,0)
mSet<-PlotPLS3DScoreImg(mSet, "4_PLS/score3d_", "png", 300, width=w, 1,2,3, 40)
mSet<-PlotPLSLoading(mSet, "4_PLS/loading_", "png", 300, width=w, 1, 2)
mSet<-PLSDA.CV(mSet, choice = "Q2")
mSet$analSet$plsda$fit.info
# Permutation test
mSet<-PlotPLS.Classification(mSet, "4_PLS/cv_", "png", 300, width=w)
mSet<-PlotPLS.Imp(mSet, "4_PLS/imp_", "png", 300, width=w, "vip", "Comp. 1", FALSE)
mSet<-PLSDA.Permut(mSet, 1000, "accu")
mSet<-PlotPLS.Permutation(mSet, "4_PLS/perm_", "png", 300, width=w)
pls_vip <- mSet$analSet$plsr$vip.mat %>% as.data.frame()
# re-plot
performance_data <- mSet$analSet$plsda$fit.info %>% as.data.frame()
performance_data$Metrics <- rownames(performance_data)
performance_data <- performance_data %>%
pivot_longer(cols = c("1 comps", "2 comps", "3 comps", "4 comps", "5 comps"),
names_to = "Components", values_to = "Value")
performance_data$Components <- gsub(" comps", "", performance_data$Components)
p1 <- ggplot(performance_data, aes(x = factor(Components), y = Value, fill = Metrics)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = round(Value, 2)), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Number of Components",
y = "Performance Score") +
ylim(0, 1) +
scale_fill_manual(values = c("#66C2A5", "#FC8D62", "#8DA0CB")) +
theme_minimal(base_size = 15) +
theme(legend.position = "top",
axis.title = element_text(size = 13),
legend.title = element_text(size = 13))
ggsave("4_PLS/cv_new.png", p1, width = 4, height = 4, units = "in", dpi = 600)
mSet <- SetAnalysisMode(mSet, "explore")
mSet <- PrepareROCData(mSet)
mSet <- PerformCV.explore(mSet, cls.method = "pls", rank.method = "pls", lvNum = 2)
fix(PlotROC) # w = 5, h = 5
mSet <- PlotROC(mSet, imgName = "5_ROC/all_models", format = "png", dpi = 600, mdl.inx = 0,
avg.method = "threshold", show.conf = 1, show.holdout = 1)
mSet <- PlotProbView(mSet, imgName = "5_ROC/multi_roc_prob", format = "png", dpi = 600,
mdl.inx = 1, show = 1, showPred = 1)
mSet <- PlotAccuracy(mSet, imgName = "5_ROC/multi_roc_accuracy", format = "png", dpi = 600)
mSet <- PlotImpBiomarkers(mSet, imgName = "5_ROC/multi_roc_impvar",
format="png", dpi=600, mdl.inx = -1, measure="mean")
mSet<-PlotROC(mSet, imgName = "5_ROC/ROC_model",
format = "png", dpi = 600,
mdl.inx = 4, avg.method = "threshold",
show.conf = 1, show.holdout = 1)
pls_vip2 <- mSet$analSet$imp.mat %>% as.data.frame()
save.image("image.RData")
HOME = "results/PD versus PR/"
# library packages
library(dplyr)
library(tidyr)
library(magrittr)
library(ggplot2)
library(MetaboAnalystR)
library(reshape2)
library(tidyverse)
library(FSA)
# set working directory
setwd("/Users/pollyhung/Desktop/metabolomics/")
options(max.print = 1000000)
# create directories
if(!dir.exists(HOME)){
dir.create(HOME)
dir.create(file.path(HOME, "1_normalisation"))
dir.create(file.path(HOME, "2_univariate"))
dir.create(file.path(HOME, "3_PCA"))
dir.create(file.path(HOME, "4_PLS"))
dir.create(file.path(HOME, "5_ROC"))
setwd(HOME)
print(paste0("directory created! We are now at: ", getwd()))
} else {
setwd(HOME)
print(paste0("directory exists! We are now at: ", getwd()))
}
load("image.RData")
View(pre_mSet)
pre_mSet$paramSet
pre_mSet$analSet$tt
pre_mSet$analSet$tt$raw.thresh
# Perform T-test (parametric) and fold change test when comparing two groups
pre_mSet <- Ttests.Anal(pre_mSet, nonpar=F, threshp=0.10, paired=FALSE, equal.var=TRUE, "fdr", FALSE)
